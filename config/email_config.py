#!/usr/bin/env python3
"""
Email Configuration for WiFi Automation System
Configure SMTP settings for automated PDF report delivery
"""

import os
from typing import Dict, Any, List

# Email Configuration
EMAIL_CONFIG = {
    # SMTP Server Settings
    "smtp_server": "smtp.gmail.com",  # Change to your SMTP server
    "smtp_port": 587,                 # TLS port (587) or SSL port (465)
    "use_tls": True,                  # Use TLS encryption
    
    # Email Account Settings
    "email_address": "fasin.absons@gmail.com",        # Your email address
    "email_password": "zrxj vfjt wjos wkwy",            # App password (not regular password)
    
    # Recipients
    "recipient_email": "faseenm@gmail.com",    # Primary recipient
    "cc_emails": [],                              # CC recipients (optional)
    "bcc_emails": [],                             # BCC recipients (optional)
    
    # Email Content Templates
    "subject_template": "WiFi Active Users Report - {date} | MoonFlower Hotel",
    "body_template": """Dear Management Team,

Please find attached the WiFi Active Users Report for {date}.

This automated report contains comprehensive data on WiFi usage across all monitored networks at MoonFlower Hotel:
‚Ä¢ EHC TV Network
‚Ä¢ EHC-15 Network  
‚Ä¢ Reception Hall-Mobile Network
‚Ä¢ Reception Hall-TV Network

Report Summary:
- Total Active Users: {total_users}
- Data Collection Date: {date}
- Report Generated: {timestamp}
- File Size: {file_size_mb} MB

The attached PDF contains detailed user information including hostnames, IP addresses, MAC addresses, connected networks, and data usage statistics.

This report is automatically generated by our WiFi Monitoring System to help track network usage and optimize guest connectivity experience.

Should you have any questions regarding this report, please contact the IT department.

Best regards,
WiFi Automation System
MoonFlower Hotel IT Department

---
This is an automated email generated by the WiFi Monitoring System.
For technical support or questions, please contact: fasin.absons@gmail.com
Report ID: WMR-{report_id}""",
    
    # Retry Settings
    "max_retry_attempts": 3,
    "retry_delay_seconds": 60,
    
    # File Settings
    "max_attachment_size_mb": 50,     # Maximum attachment size in MB
}

# Alternative configurations for different email providers
EMAIL_PROVIDERS = {
    "gmail": {
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "use_tls": True,
        "setup_instructions": [
            "1. Enable 2-factor authentication on your Google account",
            "2. Generate an App Password: https://myaccount.google.com/apppasswords",
            "3. Use the App Password (not your regular password) in email_password"
        ]
    },
    "outlook": {
        "smtp_server": "smtp-mail.outlook.com",
        "smtp_port": 587,
        "use_tls": True,
        "setup_instructions": [
            "1. Use your Outlook.com email and password",
            "2. If using 2FA, generate an App Password",
            "3. Ensure 'Less secure app access' is enabled if needed"
        ]
    },
    "yahoo": {
        "smtp_server": "smtp.mail.yahoo.com",
        "smtp_port": 587,
        "use_tls": True,
        "setup_instructions": [
            "1. Enable 2-factor authentication",
            "2. Generate an App Password from Account Security settings",
            "3. Use the App Password in email_password"
        ]
    },
    "custom": {
        "smtp_server": "your-smtp-server.com",
        "smtp_port": 587,
        "use_tls": True,
        "setup_instructions": [
            "1. Contact your email provider for SMTP settings",
            "2. Update smtp_server and smtp_port accordingly",
            "3. Configure authentication as required"
        ]
    }
}

# Email Recipients
RECIPIENTS = {
    "notifications": "faseenm@gmail.com",        # System notifications
    "general_manager": "generalmanager@moonflower.com",  # Daily PDF reports
    "backup_email": "faseen1532@gmail.com"      # Backup/testing email
}

# Email Templates
EMAIL_TEMPLATES = {
    "notification_subject": "üîî WiFi Automation Notification - {date}",
    "pdf_report_subject": "üìä Daily WiFi User Report - {date}",
    "error_subject": "‚ùå WiFi Automation Error - {date}"
}

# Attachment Settings
ATTACHMENT_SETTINGS = {
    "max_size_mb": 25,  # Maximum attachment size in MB
    "allowed_types": [".pdf", ".xlsx", ".csv"],
    "compress_large_files": True
}

def get_email_config() -> Dict[str, Any]:
    """Get email configuration with environment variable overrides"""
    config = EMAIL_CONFIG.copy()
    
    # Override with environment variables if available
    env_mappings = {
        "SMTP_SERVER": "smtp_server",
        "SMTP_PORT": "smtp_port",
        "EMAIL_ADDRESS": "email_address",
        "EMAIL_PASSWORD": "email_password",
        "RECIPIENT_EMAIL": "recipient_email",
        "EMAIL_SUBJECT": "subject_template",
        "EMAIL_BODY": "body_template"
    }
    
    for env_var, config_key in env_mappings.items():
        if env_var in os.environ:
            value = os.environ[env_var]
            
            # Convert port to integer
            if config_key == "smtp_port":
                try:
                    value = int(value)
                except ValueError:
                    continue
            
            config[config_key] = value
    
    return config

def validate_email_config(config: Dict[str, Any] = None) -> Dict[str, Any]:
    """Validate email configuration"""
    if config is None:
        config = get_email_config()
    
    validation_result = {
        "valid": True,
        "errors": [],
        "warnings": []
    }
    
    # Required fields
    required_fields = [
        "smtp_server", "smtp_port", "email_address", 
        "email_password", "recipient_email"
    ]
    
    for field in required_fields:
        if not config.get(field):
            validation_result["errors"].append(f"Missing required field: {field}")
            validation_result["valid"] = False
    
    # Check for default values that need to be changed
    default_values = {
        "email_address": "your-email@gmail.com",
        "email_password": "your-app-password",
        "recipient_email": "recipient@company.com"
    }
    
    for field, default_value in default_values.items():
        if config.get(field) == default_value:
            validation_result["warnings"].append(
                f"Field '{field}' is still set to default value: {default_value}"
            )
    
    # Validate port number
    try:
        port = int(config.get("smtp_port", 0))
        if port <= 0 or port > 65535:
            validation_result["errors"].append("Invalid SMTP port number")
            validation_result["valid"] = False
    except (ValueError, TypeError):
        validation_result["errors"].append("SMTP port must be a valid number")
        validation_result["valid"] = False
    
    # Validate email addresses
    email_fields = ["email_address", "recipient_email"]
    for field in email_fields:
        email = config.get(field, "")
        if email and "@" not in email:
            validation_result["errors"].append(f"Invalid email format for {field}: {email}")
            validation_result["valid"] = False
    
    return validation_result

def get_provider_config(provider: str) -> Dict[str, Any]:
    """Get configuration for a specific email provider"""
    if provider.lower() not in EMAIL_PROVIDERS:
        available_providers = ", ".join(EMAIL_PROVIDERS.keys())
        raise ValueError(f"Unknown provider: {provider}. Available: {available_providers}")
    
    base_config = EMAIL_CONFIG.copy()
    provider_config = EMAIL_PROVIDERS[provider.lower()]
    
    # Update base config with provider-specific settings
    base_config.update({
        "smtp_server": provider_config["smtp_server"],
        "smtp_port": provider_config["smtp_port"],
        "use_tls": provider_config["use_tls"]
    })
    
    return base_config

def print_setup_instructions(provider: str = "gmail"):
    """Print setup instructions for email provider"""
    if provider.lower() not in EMAIL_PROVIDERS:
        print(f"Unknown provider: {provider}")
        print(f"Available providers: {', '.join(EMAIL_PROVIDERS.keys())}")
        return
    
    provider_info = EMAIL_PROVIDERS[provider.lower()]
    
    print(f"\nüìß Email Setup Instructions for {provider.upper()}:")
    print("=" * 50)
    
    for i, instruction in enumerate(provider_info["setup_instructions"], 1):
        print(f"{i}. {instruction}")
    
    print(f"\nüîß Configuration:")
    print(f"SMTP Server: {provider_info['smtp_server']}")
    print(f"SMTP Port: {provider_info['smtp_port']}")
    print(f"Use TLS: {provider_info['use_tls']}")
    
    print(f"\nüìù Update config/email_config.py with your settings:")
    print(f"EMAIL_CONFIG['email_address'] = 'your-email@{provider}.com'")
    print(f"EMAIL_CONFIG['email_password'] = 'your-app-password'")
    print(f"EMAIL_CONFIG['recipient_email'] = 'recipient@company.com'")

def test_email_config():
    """Test email configuration"""
    print("\nüîç Testing Email Configuration:")
    print("=" * 40)
    
    config = get_email_config()
    validation = validate_email_config(config)
    
    if validation["valid"]:
        print("‚úÖ Configuration is valid")
    else:
        print("‚ùå Configuration has errors:")
        for error in validation["errors"]:
            print(f"  - {error}")
    
    if validation["warnings"]:
        print("\n‚ö†Ô∏è  Warnings:")
        for warning in validation["warnings"]:
            print(f"  - {warning}")
    
    print(f"\nüìã Current Configuration:")
    safe_config = config.copy()
    safe_config["email_password"] = "***hidden***"  # Don't show password
    
    for key, value in safe_config.items():
        if key in ["smtp_server", "smtp_port", "email_address", "recipient_email"]:
            print(f"  {key}: {value}")

if __name__ == "__main__":
    # Show setup instructions and test configuration
    print_setup_instructions("gmail")
    test_email_config() 