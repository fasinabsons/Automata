def complete_step5_ehc_tv_download(self):

    """Complete step 5: Click EHC TV -> Clients -> Download"""

    try:

        self.logger.info("Starting Step 5: EHC TV -> Clients -> Download")

        

        # Step 5a: Click on EHC TV

        ehc_tv_selectors = [

            "//a[contains(text(), 'EHC TV')]",

            "//span[contains(text(), 'EHC TV')]",

            "//td[contains(text(), 'EHC TV')]",

            "//div[contains(text(), 'EHC TV')]",

            "//*[contains(text(), 'EHC TV')]"

        ]

        

        ehc_tv_element = self.find_element_with_fallback(

            ehc_tv_selectors, 

            "EHC TV link", 

            timeout=15

        )

        

        if not ehc_tv_element:

            self.logger.error("Could not find EHC TV element")

            return False

        

        if not self.click_element_with_retry(ehc_tv_element, "EHC TV"):

            self.logger.error("Failed to click EHC TV")

            return False

        

        self.logger.info("Successfully clicked EHC TV")

        

        # Wait for page to load after clicking EHC TV

        self.human_like_delay(2, 4)

        

        # Step 5b: Click on Clients

        self.logger.info("Looking for Clients option...")

        

        clients_selectors = [

            "//a[contains(text(), 'Clients')]",

            "//span[contains(text(), 'Clients')]",

            "//td[contains(text(), 'Clients')]",

            "//div[contains(text(), 'Clients')]",

            "//button[contains(text(), 'Clients')]",

            "//li[contains(text(), 'Clients')]",

            "//*[contains(text(), 'Clients')]",

            "//a[contains(@href, 'clients')]",

            "//a[contains(@href, 'client')]"

        ]

        

        clients_element = self.find_element_with_fallback(

            clients_selectors, 

            "Clients link", 

            timeout=15

        )

        

        if not clients_element:

            self.logger.error("Could not find Clients element")

            self.take_screenshot("clients_not_found")

            return False

        

        if not self.click_element_with_retry(clients_element, "Clients"):

            self.logger.error("Failed to click Clients")

            return False

        

        self.logger.info("Successfully clicked Clients")

        

        # Wait for clients page to load

        self.human_like_delay(2, 4)

        

        # Step 5c: Click on Download button

        self.logger.info("Looking for Download button...")

        

        download_selectors = [

            "//button[contains(text(), 'Download')]",

            "//a[contains(text(), 'Download')]",

            "//input[@type='button' and contains(@value, 'Download')]",

            "//input[@type='submit' and contains(@value, 'Download')]",

            "//span[contains(text(), 'Download')]",

            "//div[contains(text(), 'Download')]",

            "//*[contains(text(), 'Download')]",

            "//button[contains(@class, 'download')]",

            "//a[contains(@class, 'download')]",

            "//i[contains(@class, 'download')]/..",

            "//button[contains(@onclick, 'download')]",

            "//a[contains(@href, 'download')]",

            "//button[@title='Download']",

            "//a[@title='Download']"

        ]

        

        download_element = self.find_element_with_fallback(

            download_selectors, 

            "Download button", 

            timeout=15

        )

        

        if not download_element:

            self.logger.error("Could not find Download button")

            self.take_screenshot("download_not_found")

            return False

        

        if not self.click_element_with_retry(download_element, "Download button"):

            self.logger.error("Failed to click Download button")

            return False

        

        self.logger.info("Successfully clicked Download button")

        

        # Wait for download to start

        self.human_like_delay(3, 5)

        

        # Wait for download to complete

        if not self.wait_for_download_completion():

            self.logger.warning("Download may not have completed successfully")

        

        return True

        

    except Exception as e:

        self.logger.error(f"Error in Step 5 completion: {e}")

        self.take_screenshot("step5_error")

        return False



def wait_for_download_completion(self, timeout=60):

    """Wait for download to complete by checking download directory"""

    try:

        download_dir = Path(self.config["download_directory"])

        self.logger.info(f"Waiting for download completion in: {download_dir}")

        

        # Get initial file count

        initial_files = set(download_dir.glob("*"))

        

        # Wait for new files or .crdownload files to appear and complete

        start_time = time.time()

        

        while time.time() - start_time < timeout:

            current_files = set(download_dir.glob("*"))

            

            # Check for .crdownload files (Chrome partial downloads)

            crdownload_files = list(download_dir.glob("*.crdownload"))

            

            if crdownload_files:

                self.logger.info(f"Download in progress: {len(crdownload_files)} files downloading...")

                time.sleep(2)

                continue

            

            # Check for new files

            new_files = current_files - initial_files

            if new_files:

                self.logger.info(f"Download completed: {len(new_files)} new files found")

                for file in new_files:

                    self.logger.info(f"Downloaded: {file.name}")

                return True

            

            time.sleep(1)

        

        self.logger.warning("Download timeout reached")

        return False

        

    except Exception as e:

        self.logger.error(f"Error waiting for download: {e}")

        return False



def process_ehc_tv_network(self):

    """Process EHC TV network with complete step 5"""

    try:

        self.logger.info("Processing EHC TV network")

        

        # Navigate to Wireless LANs if not already there

        if not self.navigate_to_wireless_lans():

            return False

        

        # Complete step 5: EHC TV -> Clients -> Download

        if not self.complete_step5_ehc_tv_download():

            self.logger.error("Failed to complete EHC TV download process")

            return False

        

        self.logger.info("EHC TV network processing completed successfully")

        return True

        

    except Exception as e:

        self.logger.error(f"Error processing EHC TV network: {e}")

        return False



def navigate_to_wireless_lans(self):

    """Navigate to Wireless LANs menu (steps 3-4)"""

    try:

        self.logger.info("Navigating to Wireless LANs")

        

        # Find and click Wireless LANs menu item (4th menu item)

        wireless_lan_selectors = [

            "//a[contains(text(), 'Wireless LANs')]",

            "//span[contains(text(), 'Wireless LANs')]",

            "//li[contains(text(), 'Wireless LANs')]",

            "//div[contains(text(), 'Wireless LANs')]",

            "//*[contains(text(), 'Wireless LANs')]",

            "//a[contains(text(), 'Wireless LAN')]",

            "//span[contains(text(), 'Wireless LAN')]",

            "//*[contains(text(), 'WLAN')]"

        ]

        

        wireless_lan_element = self.find_element_with_fallback(

            wireless_lan_selectors, 

            "Wireless LANs menu", 

            timeout=15

        )

        

        if not wireless_lan_element:

            self.logger.warning("Could not find Wireless LANs menu, trying page reload...")

            self.driver.refresh()

            time.sleep(3)

            

            # Try again after reload

            wireless_lan_element = self.find_element_with_fallback(

                wireless_lan_selectors, 

                "Wireless LANs menu", 

                timeout=15

            )

        

        if not wireless_lan_element:

            self.logger.error("Could not find Wireless LANs menu even after reload")

            return False

        

        if not self.click_element_with_retry(wireless_lan_element, "Wireless LANs menu"):

            self.logger.error("Failed to click Wireless LANs menu")

            return False

        

        self.logger.info("Successfully navigated to Wireless LANs")

        

        # Wait for page to load

        self.human_like_delay(2, 4)

        

        return True

        

    except Exception as e:

        self.logger.error(f"Error navigating to Wireless LANs: {e}")

        return False



def run_complete_automation(self):

    """Run the complete automation process"""

    try:

        self.logger.info("Starting complete EHC automation process")

        

        # Step 1: Navigate to URL

        self.logger.info("Step 1: Navigating to WSG URL")

        if not self.setup_webdriver():

            return False

        

        # Step 2: Login

        self.logger.info("Step 2: Logging in")

        if not self.login_to_wsg():

            return False

        

        # Steps 3-4: Navigate to Wireless LANs

        self.logger.info("Steps 3-4: Navigating to Wireless LANs")

        if not self.navigate_to_wireless_lans():

            return False

        

        # Step 5: EHC TV -> Clients -> Download

        self.logger.info("Step 5: Processing EHC TV")

        if not self.process_ehc_tv_network():

            return False

        

        self.logger.info("Complete automation process finished successfully")

        return True

        

    except Exception as e:

        self.logger.error(f"Error in complete automation: {e}")

        return False

    finally:

        if self.driver:

            self.driver.quit()

            self.logger.info("WebDriver closed")
//

Steps to webscrape accurately.
step 1: on browser we need to  put the address https://51.38.163.73:8443/wsg/ (don't omit the / after wsg it is very important.
step 2: Login with username on the first text field in the center we have 2 text fields, only these text fields are there . then secound text field is for password we should enter password there.
step 3: take the menu items we have 4th menu item that is Wireless LANs. click
step 4: sometimes we have to load so click on other items too, then get back to Wireless LANs. or reload again sometimes it is like that so reload to get data and then click Wireless LANs.
step 5: then click on EHC TV then click on clients then click on download button.
step 6: then click EHC-15 click download
step 7: download reception hall tv and mobile also similarly from page 2. there are a total of 18  records in that we only take 4 of these.
here is the html for yopur understanding
<div class="x-menu x-layer x-menu-default x-border-box" id="menu-1320" tabindex="0" style="z-index: 19000; right: auto; left: 50px; top: 44px; visibility: hidden;"><div id="menu-1320-body" data-ref="body" class="x-menu-body x-menu-body x-unselectable x-menu-body-default x-box-layout-ct x-menu-body-default" role="presentation"><div role="presentation" id="menu-1320-before-scroller" class="x-box-scroller x-box-scroller-top x-box-scroller-menu x-box-scroller-menu-default" style="display:none"></div><div id="menu-1320-innerCt" data-ref="innerCt" role="presentation" class="x-box-inner x-box-scroller-body-vertical"><div id="menu-1320-targetEl" data-ref="targetEl" class="x-box-target" role="presentation"><div class="x-menu-item x-menu-item-default x-box-item" id="menuitem-1321"><a id="menuitem-1321-itemEl" data-ref="itemEl" class="x-menu-item-link" href="#" role="menuitem" hidefocus="true" unselectable="on" tabindex="-1" componentid="menuitem-1321"><span id="menuitem-1321-textEl" data-ref="textEl" class="x-menu-item-text x-menu-item-text-default x-menu-item-indent-no-separator" unselectable="on">Change Password</span><div role="presentation" id="menuitem-1321-iconEl" data-ref="iconEl" class="x-menu-item-icon-default x-menu-item-icon  x-menu-item-glyph" style="font-family:FontAwesome !important;"></div></a></div><div class="x-menu-item x-menu-item-default x-box-item" id="menuitem-1322"><a id="menuitem-1322-itemEl" data-ref="itemEl" class="x-menu-item-link" href="#" role="menuitem" hidefocus="true" unselectable="on" tabindex="-1" componentid="menuitem-1322"><span id="menuitem-1322-textEl" data-ref="textEl" class="x-menu-item-text x-menu-item-text-default x-menu-item-indent-no-separator" unselectable="on">Preferences</span><div role="presentation" id="menuitem-1322-iconEl" data-ref="iconEl" class="x-menu-item-icon-default x-menu-item-icon  x-menu-item-glyph" style="font-family:FontAwesome !important;"></div></a></div><div class="x-menu-item x-menu-item-default x-box-item" id="menuitem-1323"><a id="menuitem-1323-itemEl" data-ref="itemEl" class="x-menu-item-link" href="#" role="menuitem" hidefocus="true" unselectable="on" tabindex="-1" componentid="menuitem-1323"><span id="menuitem-1323-textEl" data-ref="textEl" class="x-menu-item-text x-menu-item-text-default x-menu-item-indent-no-separator" unselectable="on">Log off</span><div role="presentation" id="menuitem-1323-iconEl" data-ref="iconEl" class="x-menu-item-icon-default x-menu-item-icon  x-menu-item-glyph" style="font-family:FontAwesome !important;"></div></a></div></div></div><div role="presentation" id="menu-1320-after-scroller" class="x-box-scroller x-box-scroller-bottom x-box-scroller-menu x-box-scroller-menu-default" style="display:none"></div></div></div><div class="x-css-shadow" role="presentation" id="ext-element-5" data-sticky="true" style="box-shadow: rgb(136, 136, 136) 0px 0px 6px; right: auto; left: 0px; top: 4px; width: 11px; height: 7px; z-index: 19000; display: none;"></div><div class="x-tip x-layer x-tip-default x-border-box" style="z-index: 19000; right: auto; left: 0px; top: 0px; display: none;" id="tooltip-1404"><div id="tooltip-1404-body" data-ref="body" class="x-tip-body x-tip-body-default x-tip-body-default" role="presentation"><div id="tooltip-1404-outerCt" data-ref="outerCt" class="x-autocontainer-outerCt" role="presentation"><div id="tooltip-1404-innerCt" data-ref="innerCt" style="" class="x-autocontainer-innerCt" role="presentation"></div></div></div><div role="presentation" class="x-tip-anchor x-tip-anchor-top" id="ext-element-24" style="visibility: hidden;"></div></div><div data-sticky="true" role="presentation" class="x-textmetrics" id="ext-element-39" style="font-size: 12px; font-style: normal; font-weight: 300; font-family: &quot;Trebuchet MS&quot;, helvetica, arial, sans-serif; line-height: 15px; text-transform: none; letter-spacing: normal; word-break: normal; position: absolute; right: auto; left: -1000px; top: -1000px; visibility: hidden; width: auto;"></div></body>
// in here we have to click
<div class="x-grid-cell-inner " style="text-align:left;" id="ext-element-51"><span class=" rks-clickable-column">EHC TV</span></div>
then click on (clients tab of the secound table view table)
<span id="tab-3060-btnInnerEl" data-ref="btnInnerEl" unselectable="on" class="x-tab-inner x-tab-inner-default">Clients</span>
then click on(download button)
<span id="Rks-module-base-Button-3369-btnIconEl" data-ref="btnIconEl" role="presentation" unselectable="on" class="x-btn-icon-el x-btn-icon-el-default-toolbar-small  x-btn-glyph" style="font-family:FontAwesome !important;"></span>
then click on the table element.
<div class="x-grid-cell-inner " style="text-align:left;" id="ext-element-58"><span class=" rks-clickable-column">EHC-15</span></div>
again we click on the download button.
then we click on page 2
<span id="button-2436-btnInnerEl" data-ref="btnInnerEl" unselectable="on" class="x-btn-inner x-btn-inner-plain-toolbar-small">2</span>

then we have to go through this cycle again for page 2
<span class=" rks-clickable-column">Reception Hall-Mobile</span>
then clients then download button then 
<span class=" rks-clickable-column">Reception Hall-TV</span>
then just download button since the page changed means the clients will get vanished.

step : 8 there is a schedule accordingly repeat acording to number of slots then merge the csv files altogether after 5 minutes of the last slot of download so each slot we have 4 files downloaded.
the number of files is total if there is 2 slots of time like 9:30 am and 1:00 pm then there will be 8 files if there are 3 slots we have 12 files. these 12 files will have headers like this
Hostname	IP Address	MAC Address	WLAN (SSID)	AP MAC	Data Rate (up)	Data Rate (down)
even though there are more headers we just neglect rest of the headers.

then the data of all these columns and rows are taken and merged to get a single excel file that is of 2007 model excel.
step 9: the generated excel will have header like this
Hostname	IP_Address	MAC_Address	Package	AP_MAC	Upload	Download


so package is WLAN (SSID)
Data Rate (up) is Upload
Data Rate (down) is Download

we need changes on the header. for the generated excel sheet only and also the excel must be old format 2007 microsoft excel. too so please make sure this is corrected. the downloaded csv files will have the 
headers Hostname	IP Address	MAC Address	WLAN (SSID)	AP MAC	Data Rate (up)	Data Rate (down)
then after merge the generated excel must have only
Hostname	IP_Address	MAC_Address	Package	AP_MAC	Upload	Download

so A is Hostname, B is IP_Address, C IS MAC_Address D IS Package E IS AP_MAC F IS Upload G IS Download When file gets generated.

then that file will be named as EHC_Upload_Mac_01072025. where the 01072025 is the date month year.

the csv files will be stored in different folder and merged file will be stored in another folder and inside those folders we create 01july folder according to date then we will keep updating for each date.
 improvize this prd to accurately make the application according to this steps.
 after this there is upload on the vbs code app. that i will add later but till here it is much more important.i don't need code or timeline just task list and features to do the app. detailed and perfect. with ui ux, python packages, libraries. and also windows features.
 
 

Hostname	IP Address	MAC Address	WLAN (SSID)	AP MAC	Data Rate (up)	Data Rate (down)


Hostname	IP_Address	MAC_Address	Package	AP_MAC	Upload	Download


so package is WLAN (SSID)
Data Rate (up) is Upload
Data Rate (down) is Download

we need changes on the header. for the generated excel sheet only and also the excel must be old format 2007 microsoft excel. too so please make sure this is corrected. the downloaded csv files will have the 
headers Hostname	IP Address	MAC Address	WLAN (SSID)	AP MAC	Data Rate (up)	Data Rate (down)
then after merge the generated excel must have only
Hostname	IP_Address	MAC_Address	Package	AP_MAC	Upload	Download

so A is Hostname, B is IP_Address, C IS MAC_Address D IS Package E IS AP_MAC F IS Upload G IS Download When file gets generated.
